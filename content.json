{"pages":[{"title":"About","date":"2016-10-24T02:24:00.000Z","path":"about/index.html","text":"关于我自己嗨呀，我好菜呀！有什么可说的呢。。。 看过太多同龄的大神，体会过各种被碾压得成渣渣的感觉，其中有来自某看着成长起来的小学生 (虽然截止现在-2016-已经初中了)，在各种博客中随时能发现随手就能碾压我的各种初高中生博主。 受到了有来自无节操赛艇群里各路 dalao 的鼓励，同时也让我默默献上了膝盖。。。 喜欢二次元，天天看着群里 dalao 穿女装、开车，不敢说话。。。受到某老司机的影响，所以自己也想建个车库（咳，我只是说文件应该整理对不对！） 各方面都是辣鸡，但是觉得好玩就不会放弃。 关于编程蒟蒻。。。各种意义上都是弱鸡。。。能和各位 蒟苣 dalao 生活在同一个时代真是了不起。 喜欢 C#，热爱玩 Python。因为觉得 C# 代码优美，逻辑关系明确，写的时候很舒服；用 Python 是因为喜欢脚本语言的便捷性，但是一直都吐槽动态语言的各种不爽，Python 学到后面各种黑科技黑魔法，总看到有 dalao 写的代码把我认为应该是 Python 设计不合理的地方当特性玩得飞起，卧槽，谁说 Python 简单来着！ 话说回来，shell 和 js 这种丧心病狂、自带混淆、又不得不用的语言，让我还是对 Python 感到别无所求了 (毕竟好那么多是不是)。 写页面向来无视浏览器兼容性，有各种写出失败且不可调试代码的丰富经历。 背景图包本站背景图片均来自网络，因个人喜好所以设为背景，不作商用，部分尚不明出处，绝大部分来自于我所喜爱的几位 P 站 画师，此处向各位大触们再次献上膝盖：（以下列举尚不完整~） 【wlop】 【千夜QYS3】 【白夜ReKi】 【KyoD＋@ミクラブ】 【小忍.pr】 【ASK】 【Cait】 业余爱好喜欢写字，喜欢弹钢琴 (虽然我只有手卷琴~)，喜欢画老婆~~ 不过还 too young, too naive ! 还需要再学习一个。 也喜欢古文，比如我就念了一句诗： ​ 苟利国家生死以 。。。 最后放一张齐神的嫌弃脸 - (我跟你讲我就这个表情！)"},{"title":"Categories","date":"2017-03-13T00:47:30.531Z","path":"categories/index.html","text":""},{"title":"Tags","date":"2017-03-13T00:47:30.535Z","path":"tags/index.html","text":""}],"posts":[{"title":"平面设计入门导图","date":"2017-03-12T11:34:55.000Z","path":"wiki/艺术/平面设计/平面设计入门导图/","text":"","tags":[{"name":"平面设计","slug":"平面设计","permalink":"http://wiki.zthxxx.me/tags/平面设计/"}],"categories":[{"name":"艺术","slug":"艺术","permalink":"http://wiki.zthxxx.me/categories/艺术/"},{"name":"平面设计","slug":"艺术/平面设计","permalink":"http://wiki.zthxxx.me/categories/艺术/平面设计/"}]},{"title":"点滴人生观念信条","date":"2017-02-19T16:28:21.000Z","path":"wiki/生活学习/点滴人生观念信条/","text":"学习生活观念，提高生活质量，拒绝直男癌优胜劣汰，直男癌去死。 消费观念：什么层次的人用什么层次的货不要越界追求高端，并不能达到炫耀的目的；也不要刻意低廉、过分节俭，一味去省钱，反而失去更多。 钱是赚出来的，不是省出来的，赚出来的的钱 “是为了实现一定目标的等价物”。 参见 马斯洛需求层次理论 、曹将 | 从他们分手说起。 抱目的做事而不是抱期望做事任何期望都有实现的可能，但也有落空后的失望，意志不坚的人容易被失望左右，最好是不要抱着任何好的坏的期望，而是抱着某种目的做事，想着要达成目的应该要做什么，通过目的驱动行为，通过目的驱动解决问题。 遇到问题、事件努力解决如果于自身利益相关，应该自我主动推动事情发展、解决问题，而不是别人不做我也不做，不要吝啬一丝力气。 遭遇灾难不要放弃，人活着就有希望人生和生活都是需要活着才能实现，记录人生信条就是因为认为这些信条能帮助人活的更好。 考虑最坏的打算，提前做好危机准备防人之心不可无，但不等于被害妄想症。保护自己是必要的，人不能有恃无恐。 待人和气从哪个方便来说对人对己都有好处，但是和气不等于软弱退让，而是占理但不逼迫强硬。 参考资料 马斯洛需求层次理论 曹将 | 从他们分手说起 雷斯林 | “我可以骚，你不能扰”是最没意义的口号 雷斯林 | 法律对不怕死的人无解，所以待人和气一点其实对自己也有好处 | 微信","tags":[{"name":"观念信条","slug":"观念信条","permalink":"http://wiki.zthxxx.me/tags/观念信条/"}],"categories":[{"name":"生活学习","slug":"生活学习","permalink":"http://wiki.zthxxx.me/categories/生活学习/"}]},{"title":"DISC 行为风格理论","date":"2017-02-16T04:56:24.000Z","path":"wiki/生活学习/DISC-行为风格理论/","text":"什么是 DISCDISC 是一种行为风格理论，它将人的行为通过四个维度来解释。现代 DISC 是由美国心理学家威廉·莫尔顿·马斯顿博士（Dr. William Moulton Marston）在二十世纪二十年代提出的理论基础发展和延伸来的。DISC 四个字母各表示一个维度，其具体解释各家略有差别。四个属性简单概括如下： D : Dominance / Director , 老板型 / 指挥者，表现为目标明确、执行力强。 I : Influence / Interact , 互动型 / 社交者，表现为热爱分享、性格活泼。 S : Steadiness / Supporter , 支持型 / 支持者，表现为对人依赖和迁就。 C : Corrector / Compliance , 修正型 / 思考者，现为标准清晰、追求卓越。 DISC 是对人行为、情绪、性格的归纳，既可以说某人是 D 类型的性格，也可以说某人这个行为偏 D 属性。每个人都有 DISC 方面的四个属性，只是偏向性不同，是行为风格的一种特点，每种熟悉之间没有好坏之分，并且可以易于通过训练改变偏向的属性特质。 DISC 理论中既包括每个属性都有哪些特质，也包括每种属性的人心里对人对事的期望，和如何正确对各种属性的人打交道。 DISC 有什么作用因为 DISC 跟人性格的强相关性，最常见的使用就是通过 DISC 理论分析周围人的性格属性，采用适用的沟通方式减少交流障碍与矛盾；很多时候你在人群中不受欢迎，是因为没有采取对味的谈话方式给不同 DISC 属性的人。 延伸上讲，DISC 覆盖的范围就很广了； 与人力资源挂钩，企业管理通过了解职员的特性，进而分配合适的任务，放对人才位置提升人力效率； 与自我分析挂钩，细致分析自我的 DISC 属性偏向再回顾过去，能很容易解释以往做错事的原因，这时总结自己 DISC 属性方面的缺失，能够预测自己在遇到某类问题时容易犯什么错，针对性的训练自己某个缺失的属性，完善和规整自身行为。 与演讲演示挂钩，通过 DISC 分析现场观众成分，调整演讲者说话内容的属性，帮助调动现场氛围，更吸引人。 与对话谈判挂钩，分析对手缺失的属性，判断对手到底是吃哪套的人，直击谈判痛点，反转局势。 与人生规划挂钩，了解自己，才能给自己规划合适的方向，不断调整、学习和发展。 DISC 的应用非常之多，是涵盖社区交往多数场合的常用技能。 如何分析人的 DISC 属性上面有简单介绍 DISC 属性的特质，这里也先放上一张总结性的属性表。 企业中常用的识别方式是通过让职员使用网页或软件做 DISC 测评，通过软件分析得出员工属性偏向； 日常生活中肯定是没办法让你身边的每个人都做一套测评题的，但是我们也可以通过观察他人的言行，说话风格做事风格，来简单分析某个人处于这个场景中更偏向哪种属性。相处方法符合“同性相吸”，即他是什么特质的人，你就按那个特质的行为方式来回应他，一般都会让他满意，两方相处都舒服。 D 属性属性特质： 关注事情发展 能力强，态度偏强势，自主积极推动事情 目标坚定，认定的事情不容易改 喜欢定计划，追求办事效率 做事不留情面（不会照顾感情） 常见于老板领导特质 沟通要点： 第一，计划性要强 第二，避免正面争论 第三，汇报要点 第四，如果做错了，及时承认 考虑使用“三点汇报法” 最重要的是什么 最紧急的是什么 列完整清单 I 属性属性特质： 关注人的情绪变化 喜欢与人交谈而不是刻板做事 社交主动，乐于分享 喜欢听故事讲故事，善于描述细节，喜欢夸张性的形容词 回应人热情、积极及时 常见于社交达人特质 沟通要点： 第一，热情回应 第二，告诉他“你有趣” 第三，多用具体的人和事来表达 第四，多表达感受 第五，不要跟他们谈“人不为己天诛地灭” S 属性属性特质： 随和，中庸，没有棱角 比较关注人的行为 喜欢在后面支持帮助他人，不善于正面出风头 服从安排 喜欢和平，害怕冲突矛盾 话不多说，做事稳健，不会急躁，谨言慎行 长久保持一致，固有原则，不喜欢改变 沟通要点： 第一，多说一两句温暖和肯定的话 第二，多一些关怀和包容 第三，多一些指导给出规划 C 属性属性特质： 关注事情方向的把控 喜欢标准化，善于分析规则 总跟他人摆事实讲道理 先思考后做事情 喜欢简洁（外观和流程） 喜欢定计划，按步就搬，也要求别人要守规矩 追求完美卓越，对人对事要求高 情感内敛，有话直说，按规矩办事而不受感情影响 表情严肃，给人一定不易接近的距离感 沟通要点： 第一，用数据和事实说话 第二，保持距离，不用套近乎 第三，让他们先发言 第四，有话直说但一定要符合逻辑 场景举例D 属性 这个项目已经进展到核心环节，目前最重要的是做尽职调查，完善财务数据；（最重要的是什么） 当前最紧急的事是跟对方领导沟通，安排一次碰头会；（最紧急的是什么） 其他相关的进度在这张表上，我马上发送到您的邮箱，有任何问题可以随时联系我。（完整清单） I 属性 I：“我发现有个新的APP，真的超有用，你看看……” “恩，真的哎！我马上去下！”（及时热情反馈） S 属性 “我记得琶醍有家餐馆不错，晚上一起去吃吧，不要说拒绝哦！”（有安排，并表现照顾） C 属性直接陈述道理和事实即可。 参考资料 李海峰说DISC 李海峰：DISC帮领导者巧用人用对人 曹将：DISC 分析简述 | 微信 曹将：DISC 与人际沟通 | 微信","tags":[{"name":"生活学习","slug":"生活学习","permalink":"http://wiki.zthxxx.me/tags/生活学习/"},{"name":"DISC","slug":"DISC","permalink":"http://wiki.zthxxx.me/tags/DISC/"}],"categories":[{"name":"生活学习","slug":"生活学习","permalink":"http://wiki.zthxxx.me/categories/生活学习/"}]},{"title":"马斯洛需求层次理论","date":"2017-02-13T05:22:49.000Z","path":"wiki/生活学习/马斯洛需求层次理论/","text":"简介亚伯拉罕·马斯洛(Abraham Harold Maslow, 1908-1970)，人本主义心理学（Humanistic Psychology）的主要创建者之一。 马斯洛在 1943 年发表的《人类动机的理论》（ A Theory of Human Motivation Psychological Review）与 1954 年发表的《动机与人格》（Motivation and personality）书中提出了以下五层（又或称七层）需求层次理论。各层需求之间不但有高低之分，而且有前后顺序之别；只有低一层需求获得满足之后，高一层的需求才会产生。需求分为两大类，较低的前三层称为基本需求（basic needs），较高的后两层称为成长需求（growth needs）。基本需求有一共同性质，为均系由于生理上或心理上有某些欠缺而产生，故而又称匮乏性需求（deficiency needs）。 五大需求层次生理需求这是人类维持自身生存的最基本要求，包括饥、渴、衣、住、行的方面的要求。如果这些需要得不到满足，人类的生存就成了问题。在这个意义上说，生理需要是推动人们行动的最强大的动力。马斯洛认为，只有这些最基本的需要满足到维持生存所必需的程度后，其他的需要才能成为新的激励因素，而到了此时，这些已相对满足的需要也就不再成为激励因素了。 安全需求这是人类要求保障自身安全、摆脱事业和丧失财产威胁、避免病害的侵袭、接触严酷的监督等方面的需要。马斯洛认为，整个有机体是一个追求安全的机制，人的感受器官、效应器官、智能和其他能量主要是寻求安全的工具，甚至可以把科学和人生观都看成是满足安全需要的一部分。 感情需求这一层次的需要包括两个方面的内容。一是友爱的需要，即人人都需要伙伴之间、同事之间的关系融洽或保持友谊和忠诚；人人都希望得到爱情，希望爱别人，也渴望接受别人的爱。二是归属的需要，即人都有一种归属于一个群体的感情，希望成为群体中的一员，并相互关心和照顾。感情上的需要比生理上的需要来的细致，它和一个人的生理特性、经历、教育、宗教信仰都有关系。 尊重需求人人都希望自己有稳定的社会地位，要求个人的能力和成就得到社会的承认。尊重的需要又可分为内部尊重和外部尊重。内部尊重是指一个人希望在各种不同情境中有实力、能胜任、充满信心、能独立自主。外部尊重是指一个人希望有地位、有威信，受到别人的尊重、信赖和高度评价。马斯洛认为，尊重需要得到满足，能使人对自己充满信心，对社会满腔热情，体验到自己活着的用处和价值。 自我实现需求这是最高层次的需要，它是指实现个人理想、抱负，发挥个人的能力到最大程度，完成与自己的能力相称的一切事情的需要。也就是说，人必须干称职的工作，这样才会使他们感到最大的愉悦。自我实现的需要是在努力实现自己的潜力，使自己越来越成为自己所期望的人物。根据马斯洛的需求层次论，个人人格获得充分发展的理想境界是自我实现，自我实现（self actualization）就是人性本质的终极目的，也就是个人潜力得到了充分发展。 我倾向于使用马斯洛需求层次来解释或分析一些行为，例如，买不买奢侈品？ 所谓奢侈品即是超出人们生存发展与需要范围的消费品，通常买的人是希望通过奢侈品的独特性和稀缺性来表示自己或希望他人认同自身独特的身份和社会地位。 根据以上特点我认为奢侈品是属于尊重需求及以上的层次，对于没有工作的学生或者刚找到工作仅能凑合糊口的人来说，生理需求和安全需求刚刚满足或没有满足，不应该过分往高层次需求上勉强，这部分人通常也不是奢侈品的买主。但是对于年收入过百万的白领老总等一类人来说，两三千的包，三四千的表可能都不算什么奢侈品，甚至沦落到必要消费品里面，毕竟没个两三千的表根本不好意思拿出手吧。 这两者的差别，用马斯洛需求层次来解释大概是处于不同层次间的人主要追求目的的不同表现。什么层次的人都应该使用符合自己层次的东西，假如处在基本需求层的人突然追求超越了本层需求的东西，除了一些特殊情况，一般来说都可能是错误选择，也会闹出一些笑话： （以下出自知乎答主 明月心 的回答） 以我在这个土豪城市的观察来看，如果你住豪宅，开的车价格超过100万，你随意拎个高仿的包、玻璃石头的戒指，朋友同事都不会怀疑那是假的，你随意淘宝一件衣服别人都会问是哪个名牌。 反之，你开辆10万左右的家用小轿车再戴个10万的钻戒，你知道别人怎么想吗？—— “那谁的钻戒假的吧？一看她家条件也就一般，应该买不起真的。” “如果是真的才搞笑了，缺心眼呢吧……” 人们往往更愿意从大件商品来判断一个人的家境或经济能力，无论是对他们身边熟悉的人还是一个刚刚接触到的人。拎真LV挤公交的mm，如果想用一两个包就获得周围人对她“白富美”的定义，从而满足虚荣心，是注定要失望的。 参考资料 马斯洛人类需求五层次理论(Maslow’s Hierarchy of Needs) 亚伯拉罕·马斯洛","tags":[{"name":"生活学习","slug":"生活学习","permalink":"http://wiki.zthxxx.me/tags/生活学习/"}],"categories":[{"name":"生活学习","slug":"生活学习","permalink":"http://wiki.zthxxx.me/categories/生活学习/"}]},{"title":"gulp-imagemin 使用与参数设置","date":"2017-02-03T05:50:52.000Z","path":"wiki/技术开发/前端/gulp-imagemin-使用与参数设置/","text":"使用版本 gulp : v3.9.1 gulp-imagemin : v3.1.1 简介gulp-imagemin 是配合 gulp 用作压缩图片文件的工具（包括PNG、JPEG、GIF和SVG图片）。 gulp-imagemin 更新 v3.0.0 版本后，用法与之前版本有所区别。 最近我一开始使用的时候就在网上搜索，看到很多博客都讲得一样，于是随便复制了一段代码拿来用。但是实际测试发现，这段代码里设置的参数并没有起作用，比如不管怎样设置压缩质量，出来的结果都一样。于是开始调试，通过阅读源码和官方文档后，我发现目前国内网上关于 gulp-imagemin 的代码大部分都是错的，并且明显看得出是相互抄袭复制的。或者也不能说是错了——没有注明版本，原来的代码用在目前的版本（v3.1.1）上就是错的。 我摘抄了一则 gulp-imagemin 网上常见的错误代码 如下：（注意是对 v3.0.0 及以上版本的错误代码，对 v2.4.0 版本可能正确。） 1234567891011121314// 只适用于gulp-imagemin 2.4.0 或以下版本var gulp = require('gulp'), imagemin = require('gulp-imagemin'); gulp.task('testImagemin', function () &#123; gulp.src('src/img/*.&#123;png,jpg,gif,ico&#125;') .pipe(imagemin(&#123; optimizationLevel: 5, //类型：Number 默认：3 取值范围：0-7（优化等级） progressive: true, //类型：Boolean 默认：false 无损压缩jpg图片 interlaced: true, //类型：Boolean 默认：false 隔行扫描gif进行渲染 multipass: true //类型：Boolean 默认：false 多次优化svg直到完全优化 &#125;)) .pipe(gulp.dest('dist/img'));&#125;); 上段代码出处：gulp教程之gulp-imagemin | 一点 且不说 progressive: true 的意思应该是“转为渐进式图片”，这段代码在 gulp-imagemin v3.0.0 之后就不正确了，主要体现在 imagemin(option) 的参数设置。 目前网上没有找到几个 3.0.0 之后版本的示例代码，于是我自己去查看官方 API 说明，这里摘抄一段如下： sindresorhus committed on 12 Aug 2016 APIComes bundled with the following lossless optimizers: gifsicle — Compress GIF images jpegtran — Compress JPEG images optipng — Compress PNG images svgo — Compress SVG images These are bundled for convenience and most will not need anything else. imagemin([plugins], [options])Unsupported files are ignored. pluginsType: ArrayDefault: [imagemin.gifsicle(), imagemin.jpegtran(), imagemin.optipng(), imagemin.svgo()] Plugins to use. This will overwrite the default plugins. Note that the default plugins comes with good defaults and should be sufficient in most cases. See the individual plugins for supported options. optionsType: Object verboseType: booleanDefault: false Output more detailed information. 可以看到 options 项只有一个项 verbose，用于输出详细信息，而不是像上面那段代码的 optimizationLevel interlaced 等项。 在四个默认插件的 API 文档中又能进一步找到参数说明。 根据官方 API 文档，我这里给出我的示例代码如下： 1234567891011121314// gulp-imagemin v3.0.0 及以上版本const gulp = require('gulp');const imagemin = require('gulp-imagemin');gulp.task('minify-imgs', function () &#123; return gulp.src('./public/images/**/*.&#123;png,jpg,gif,svg&#125;') .pipe(imagemin([ imagemin.gifsicle(&#123;interlaced: true&#125;), imagemin.jpegtran(&#123;progressive: true&#125;), imagemin.optipng(), imagemin.svgo() ], &#123;verbose: false&#125; )) .pipe(gulp.dest('./public/images'))&#125;); 以上代码仍使用四个默认 imagemin 插件，设置将 gif 转为交错式，将 jpeg 转为渐进式，png 与 svg 使用默认设置，不输出详细信息。 所以用某一个工具或者模块之前，应该先自己阅读一遍官方文档。 我所了解的现在人们一般学习过程是，先看博客里的入门教程，然后直接写代码，学过了入门级往深一点走，才知道遇到问题会去查官方文档。我想说，官方文档有时候确实难啃，但是如果一开始我们就看了官方文档，后面会不会少走点弯路呢？ 参考资料 gulp教程之gulp-imagemin gulp-imagemin图片压缩—-gulp系列 gulp-imagemin | npmjs sindresorhus/gulp-imagemin | GitHub imagemin/imagemin-jpegtran | GitHub","tags":[{"name":"Nodejs","slug":"Nodejs","permalink":"http://wiki.zthxxx.me/tags/Nodejs/"},{"name":"gulp","slug":"gulp","permalink":"http://wiki.zthxxx.me/tags/gulp/"}],"categories":[{"name":"技术开发","slug":"技术开发","permalink":"http://wiki.zthxxx.me/categories/技术开发/"},{"name":"前端","slug":"技术开发/前端","permalink":"http://wiki.zthxxx.me/categories/技术开发/前端/"}]},{"title":"渐进式 JPEG 格式","date":"2017-02-01T15:02:02.000Z","path":"wiki/计算机基础知识/图形图像/渐进式-JPEG-格式/","text":"JPEG 图像文件有两种保存方式，分别是 Baseline JPEG（基本式）和Progressive JPEG（渐进式），两种方式保存时有相同的尺寸、后缀名和图像数据，区别是两种格式文件在加载时的显示方式不同。 Baseline JPEGBaseline（基本式）格式保存的 JPEG 文件是通过一次按从上到下的扫描，顺序式编码（Sequential Encoding）保存数据的，加载这个文件时，数据将按照存储的顺序从上一行一行往下显示出来，正如其名字一样，是线性加载显示，直到加载完所有数据。 Progressive JPEGProgressive （渐进式）格式保存的 JPEG 文件包含多次扫描，采用递增式编码（Progressive Encoding）来存储数据，每次扫描整个图片并在上次基础上产生一次图像数据。图片在加载时，依次读取数据，先模糊的显示整个图片，随着读到的扫描次数增加，图片不断变得清晰，直到完显示所有数据。 对比上面张效果图都是在网速慢时浏览器上常出现的明显情况，一般来说网站上应该使用 渐进式 JPEG， 因为通常我们认为渐进式比起基本式来说，可以让用户在刚开始下载图片时就看到整个图片的大致轮廓和内容，而不必一直干等着加载，并且比起基本型未加载完时的空白，渐进式在未加载完时，依旧有草图的显示，在心理上会直观的感觉这个网站加载更快一点。 两个格式对于同一个图像来说，没有明显的大小和性能差异，图片质量也是一模一样，只是通常来说，同一个图像 渐进式保存比基本式保存的文件大小更小一点，在保存和显示时，渐进式消耗的 CPU 资源更多一点。 在 Photoshop 中，“文件”菜单下可选择“Save for Web”（汉化版为：存储为 Web 格式），JPEG 格式下可勾选“Progressive”（汉化版为：连续），然后保存就是渐进式的 JPEG。（顺便一提，PNG 格式下汉化叫“交错”） 参考资料 使用渐进式JPEG来提升用户体验 渐进式jpeg(progressive jpeg)图片及其相关 Progressive jpegs: a new best practice","tags":[{"name":"图像格式","slug":"图像格式","permalink":"http://wiki.zthxxx.me/tags/图像格式/"}],"categories":[{"name":"计算机基础知识","slug":"计算机基础知识","permalink":"http://wiki.zthxxx.me/categories/计算机基础知识/"},{"name":"图形图像","slug":"计算机基础知识/图形图像","permalink":"http://wiki.zthxxx.me/categories/计算机基础知识/图形图像/"}]},{"title":"Vim 粘贴模式","date":"2017-01-26T16:54:39.000Z","path":"wiki/技术开发/Linux/Vim/Vim-粘贴模式/","text":"在开启自动缩进的 Vim 中使用 Shift + Insert 键粘贴带有缩进的代码时，Vim 会把粘贴的内容当作键盘输入来处理，使得每遇到一个换行符就会添加一次自动缩进，导致原本的代码每行被依次连续往后缩，导致代码变乱。 既然是缩进问题，首先尝试的是取消自动缩进功能： 12345\" 关闭自动缩进和智能缩进\" set noai\" set nosi:set nosmartindent :set noautoindent 关闭自动缩进后，有时能解决错行了，有时还是不行。 更推荐的做法是使用 Vim 的 Paste 模式，这个是 Vim 自带的，为了避免粘贴时出现一些格式错误而使用的。 1234\" 开启粘贴模式:set paste\" 取消粘贴模式:set nopaste 在粘贴模式下（Paste Mode），粘贴内容不会出现代码变形，通过部分了解，发现粘贴模式修改了好几项设置： textwidth 设置为 0 wrapmargin 设置为 0 softtabstop 设置为 0 关闭自动缩进（noautoindent nosmartindent） 重置 revins 重置 ruler 重置 showmatch 清空 formatoptions 禁用 lisp 禁用 indentexpr 禁用 cindent 所以之前说的关闭自动缩进只是 Paste 模式下的一项，考虑不够全面，所以有时还是会格式错位。 并且 Paste 模式本身有一个切换选项 pastetoggle 可以直接绑定快捷键来方便切换开启和取消粘贴模式。 1:set pastetoggle=&lt;F11&gt; 这样只需要按 F11 就能开启和取消粘贴模式了。","tags":[{"name":"Linux","slug":"Linux","permalink":"http://wiki.zthxxx.me/tags/Linux/"},{"name":"Vim","slug":"Vim","permalink":"http://wiki.zthxxx.me/tags/Vim/"}],"categories":[{"name":"技术开发","slug":"技术开发","permalink":"http://wiki.zthxxx.me/categories/技术开发/"},{"name":"Linux","slug":"技术开发/Linux","permalink":"http://wiki.zthxxx.me/categories/技术开发/Linux/"},{"name":"Vim","slug":"技术开发/Linux/Vim","permalink":"http://wiki.zthxxx.me/categories/技术开发/Linux/Vim/"}]},{"title":"Git commit message 基本规范","date":"2017-01-22T20:14:54.000Z","path":"wiki/技术开发/Git/Git-commit-message-基本规范/","text":"使用 git 提交版本时，commit message 很重要，在回顾 commit log 时需要清晰的知道每次改动是什么。 在我们写这个提交信息（commit message）时，应该遵守一定书写结构，帮助我们统一规范和理清思路。 一般遵守 thoughtbot 规范，这里有他们的详细说明 5 Useful Tips For A Better Commit Message。 12345678950-character subject line72-character wrapped longer description. This should answer:* Why was this change necessary?* How does it address the problem?* Are there any side effects?Include a link to the ticket, if any. 简单的说就是： 第一行不超过 50 个字符 第二行空一行 第三行开始是描述信息，每行长度不超过 72 个字符，有序号，结尾无句号 第三行开始的描述信息主要说明： 这个提交有什么改动？ 如何解决的问题？ 会对哪方面产生影响吗？ 描述信息完后空一行，close issue 或者给个相应 ticket 的链接 Example: 12345678fix($compile): couple of unit tests for IE9 1. Older IEs serialize html uppercased, but IE9 does not...2. Would be better to expect case insensitive, unfortunately jasmine does3. not allow to user regexps for throw expectations Closes #392Breaks foo.bar api, foo.baz should be used instead","tags":[{"name":"Git","slug":"Git","permalink":"http://wiki.zthxxx.me/tags/Git/"}],"categories":[{"name":"技术开发","slug":"技术开发","permalink":"http://wiki.zthxxx.me/categories/技术开发/"},{"name":"Git","slug":"技术开发/Git","permalink":"http://wiki.zthxxx.me/categories/技术开发/Git/"}]},{"title":"Ubuntu 16.04 开机默认命令行界面","date":"2017-01-22T19:43:10.000Z","path":"wiki/技术开发/Linux/Ubuntu/Ubuntu-16-开机默认命令行界面/","text":"关闭图形界面，默认命令行 不推介，不可恢复 1sudo systemctl disable lightdm.service 将会直接卸载删除 lightdm，目前没找到直接恢复办法。 推介，安全，可恢复 1sudo systemctl set-default multi-user.target 只是修改默认交互目标，开机不会后台启动桌面。 开启图形界面，默认图新界面 针对上述第一条，只能重装 lightdm 1sudo apt-get install --reinstall lightdm 对应上述第二条，再切换回默认图形交互 1sudo systemctl set-default graphical.target 临时开启 刚刚两条都是需要要配置后重启的，不过就算不切换默认，或者在重启之前，任何时候都可以临时开启图形界面： 1sudo systemctl start lightdm 只限当次开机中，如果没有切换默认图形界面，下次开机任然会是命令行界面。","tags":[{"name":"Ubuntu","slug":"Ubuntu","permalink":"http://wiki.zthxxx.me/tags/Ubuntu/"}],"categories":[{"name":"技术开发","slug":"技术开发","permalink":"http://wiki.zthxxx.me/categories/技术开发/"},{"name":"Linux","slug":"技术开发/Linux","permalink":"http://wiki.zthxxx.me/categories/技术开发/Linux/"},{"name":"Ubuntu","slug":"技术开发/Linux/Ubuntu","permalink":"http://wiki.zthxxx.me/categories/技术开发/Linux/Ubuntu/"}]},{"title":"Linux 命令控制屏幕","date":"2017-01-21T19:13:34.000Z","path":"wiki/技术开发/Linux/Linux-命令控制屏幕/","text":"关闭屏幕适合没有关闭屏幕快捷键的笔记本等设备。 /sys 文件方式： 1sudo tee /sys/class/backlight/intel_backlight/brightness &lt;&lt;&lt; 0 亮度值根据情况选择，一般 0 即为关闭。 xset 命令方式： 1xset dpms force off 实际使用时可写成脚本，然后设置自定义快捷键来运行。","tags":[{"name":"Linux","slug":"Linux","permalink":"http://wiki.zthxxx.me/tags/Linux/"}],"categories":[{"name":"技术开发","slug":"技术开发","permalink":"http://wiki.zthxxx.me/categories/技术开发/"},{"name":"Linux","slug":"技术开发/Linux","permalink":"http://wiki.zthxxx.me/categories/技术开发/Linux/"}]},{"title":"Welcome Zthxxx's Wiki Site","date":"2017-01-21T17:55:57.000Z","path":"wiki/index/","text":"这是 zthxxx 的个人 Wiki 站点，主要记录一些自己总结的只言片语的零散知识点。 我一直觉得 知识不能碎片化，要结构化，于是希望寻找一种优雅的方式来管理我的知识。 先后了解或尝试过 OneNote、Evernote、Blog、Wiki 等方式，总结了一套觉得比较合理的知识获取吸收管理流程： 通过网页、RSS、微信等网络渠道作为知识获取来源。 通过笔记系统（手写笔记、OneNote、Evernote）初步筛选有价值有针对性的信息，收藏信息，分类整理，做读后要点笔记记录。 自己平时突然想到或总结的一两句话，或很零碎的点子、灵感，初步消化的内容，则用 Wiki 记录。 最后当 Wiki 在某版块有一定量后，将这方面笔记和 Wiki 中的内容重读，整理和提炼，二次消化精炼再加上自己的感悟和理解，写成文章发表在 博客 上。 在使用中，笔记系统 主大块信息的分类和整理，Wiki 主零碎知识的积累，而 博客 只在于 精。 Wiki 中某一版块刚建时，可能只有很少内容或者就一句话，但是通过这种使用流程，日积月累，这方面的事物接触得多了，零散的知识也就多了，那么 Wiki 中这个版块记录的内容也就会变多了，也就是通过积累，把原本大量碎片化的知识结构化整理起来了。 博客的目的是 分享和展示，分享自己的知识，展示自己的水平，需要放拿得出手的东西，因此不适合放碎片化的只言片语，更适合放 一个系列 的总结或者教程等，是一个十分成体系的知识平台。 当我尝试部署一个自己的 Wiki 系统时，又开始纠结于选择哪个 Wiki 系统。参考网上博客，实际部署和对比比较了几个时下流行的 Wiki 系统：MediaWiki, DokuWiki, MDwiki, TiddlyWiki, wiz, vimwiki, Simiki, Wikitten 等等。都不如人意，有些是部署麻烦复杂，有些是界面太丑，有些不能分级，有些分级不能展开，有些不能搜索，还有的甚至不是用的 Markdown 。。。 根据这些不算满意的使用体验，我总结整理了一下自己对于 个人 Wiki 的一些需求。 界面简洁美观，排版字体友好 支持多级分类 方便修改和更新内容 部署简单 分类目录可展开和收缩 展开分类时可查看该分类下所有文章 / 词条的标题 每篇文章 / 词条能添加多个分类 / 标签 Wiki 可支持引用内部链接 使用 Markdown 书写文章 / 词条 支持全文搜索（可搜索内容和标题） 在之前的使用中，Wikiteen 是最接近我需求的，但是仍然有一些条件不满足，比如部署和搜索。但是我个人比较喜欢 Wikitten 的样式。 于是最终我选择了仿照 Wikitten 的样式自己写这个基于 Hexo 的 Wiki 主题 hexo-theme-Wikitten，作为自己用的一套 Wiki 系统，基本实现了上述的需求。现在暂时自己用着，当然这个初步功能还很简单，后续也有一堆 Bug 和 TODO List 需要维护，欢迎有兴趣的提提 PR。","tags":[],"categories":[]}]}